In this fixes a vulnerability in tinyserv.c where a hard-coded admin_cookie_key allowed an attacker to bypass the authentication mechanism and gain unauthorized access to admin.txt by accessing the source code, extracting the key, and forging an authentication cookie. 

To solve this problem, we would generate a dynamic key instead of hard-coding the key and then storing it in the cookie_key.txt file.  We write two helper functions, save_cookie_key_to_file and load_cookie_key_from_file, in order to manage access to admin_cookie_key. save_cookie_key_to_file is responsible for storing the newly generated admin_cookie_key into cookie_key. save_cookie_key_to_file is responsible for saving the newly generated admin_cookie_key into cookie_key.txt, and then ensure that the file can only be accessed by the server process, preventing attackers from reading the key. load_cookie_key_from_file is used to check whether cookie_key.txt exists or not when the server starts up, and if it exists, then the key will be read from the file and loaded into the admin_cookie_key variable. If the file exists, the key is read from the file and loaded into the admin_cookie_key variable; if the file does not exist, uniform_random is called to generate a new key and store it in the file via save_cookie_key_to_file. To generate the key, we use uniform_random during server initialization to generate a 32-byte random value which is high in entropy, converts it to a hexadecimal string and stores it in admin_cookie_key.txt, and finally adds a null terminator \0 to ensure proper storage.

By doing these above, at each start, the server will first check if cookie_key.txt exists, if the file already exists, it will read the key directly, otherwise it generates a new key and writes it to the file, and ensures that only the authenticated users has access to the file.